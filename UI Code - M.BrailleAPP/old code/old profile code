import { ScrollView, TextInput, Switch, Alert } from "react-native";
import { SafeAreaView, View, Text, StyleSheet, Image, TouchableOpacity, Modal } from "react-native";
import React, { useContext, useState, useEffect } from "react";
import * as ImagePicker from 'expo-image-picker';
import FeatherIcon from "react-native-vector-icons/Feather";
import { Feather } from '@expo/vector-icons';
import { FontAwesome5 } from "@expo/vector-icons";
import { AntDesign } from '@expo/vector-icons';
import { AuthContext } from "../../navigation/AuthProvider";
import { database, storage, authentication } from "../../FirebaseConfig";
import { getDoc, doc, updateDoc } from 'firebase/firestore';
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import { ActivityIndicator } from 'react-native';
import { reauthenticateWithCredential, updatePassword, EmailAuthProvider } from 'firebase/auth';

const Profile = ({ navigation }) => {
  const { user, logout } = useContext(AuthContext);
  const [image, setImage] = useState(null);
  const [userData, setUserData] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [name, setName] = useState("Name");
  const [showLogoutModal, setShowLogoutModal] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [uploading, setUploading] = useState(false);
  
  //for password changing
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [isChangingPassword, setIsChangingPassword] = useState(false);

  const handleEditPress = () => {
    setIsEditing(true);
  };

  const handleSave = async () => {
    // Perform save action to firebase
    setIsSaving(true); // Set isSaving to true before saving
    try {
      await updateDoc(doc(database, 'users', user.uid), {
        fullname: name // Assuming 'fullname' is the field in Firestore where you store the user's display name
      });
      console.log('User data updated successfully');
      setIsEditing(false); // Update the editing state
    } catch (error) {
      console.error('Error updating user data:', error);
      // Handle error
    } finally {
      setIsSaving(false); // Set isSaving back to false after saving
    }
  };

  const handleLogout = () => {
    setShowLogoutModal(true);
  };

  const confirmLogout = () => {
    logout();
  };

  const cancelLogout = () => {
    setShowLogoutModal(false);
  };

  const getUser = async () => {
    try {
      const userDoc = await getDoc(doc(database, 'users', user.uid));
      if (userDoc.exists()) {
        setUserData(userDoc.data());
      } else {
        console.log('User does not exist');
      }
    } catch (error) {
      console.error('Error getting user', error);
    }
  };

  useEffect(() => {
    getUser();
  }, []);

  // console.log(userData)

  useEffect(() => {
    if (userData) {
      setName(userData.fullname || "Name");
    }
  }, [userData]);

  const handleChangePassword = async () => {
    setIsChangingPassword(true); // Set loading state to true
    try {
      // Perform password change using Firebase Authentication
      const user = authentication.currentUser;
      const credential = EmailAuthProvider.credential(user.email, currentPassword);
      await reauthenticateWithCredential(user, credential);
      await updatePassword(user, newPassword);

      Alert.alert('Password changed successfully');
      console.log('Password changed successfully');
      setCurrentPassword(''); // Clear current password input
      setNewPassword(''); // Clear new password input
    } catch (error) {
      console.error('Error changing password:', error.message);
      // Handle error
    } finally {
      setIsChangingPassword(false); // Set loading state back to false
    }
  };

  // UI components for password change
  const passwordChangeUI = (
    <View style={styles.changeInfo}>
      <Text style={styles.infoHeader}>Change Password</Text>
      <View style={styles.inputWrapper}>
        <FontAwesome5 name="key" size={18} color="blue" style={styles.iconStyle} />
        <TextInput
          style={styles.input}
          placeholder="Current Password"
          secureTextEntry
          value={currentPassword}
          onChangeText={(text) => setCurrentPassword(text)}
        />
      </View>
      <View style={styles.inputWrapper}>
        <FontAwesome5 name="key" size={18} color="blue" style={styles.iconStyle} />
        <TextInput
          style={styles.input}
          placeholder="New Password"
          secureTextEntry
          value={newPassword}
          onChangeText={(text) => setNewPassword(text)}
        />
      </View>
      <TouchableOpacity onPress={handleChangePassword}>
        {isChangingPassword ? (
          <ActivityIndicator color="Blue" size="small" />
        ) : (
          <AntDesign name="edit" size={20} color="black" />
        )}
      </TouchableOpacity>
    </View>
  );

  const pickImageFromGallery = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1 , 1],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
      console.log(result.assets[0].uri)
      setModalVisible(false);
      // updateUserImg();
    }
  };

  const takeImageFromCamera = async () => {
    let result = await ImagePicker.launchCameraAsync({
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.cancelled) {
      setImage(result.assets[0].uri);
      console.log(result.assets[0].uri)
      setModalVisible(false);
      // updateUserImg();
    }
  };

  // Call updateUserImg() when image changes
  useEffect(() => {
    if (image) {
      updateUserImg();
    }
  }, [image]);

  const uploadImage = async (uri) => {
    setUploading(true);
    let filename = uri.substring(uri.lastIndexOf('/') + 1);
    const response = await fetch(uri);
    const blob = await response.blob();
    const storageRef = ref(storage, `profileImages/${filename}`);
    
    const task = uploadBytesResumable(storageRef, blob);
  
    // Set transferred state
    task.on('state_changed', (taskSnapshot) => {
      console.log(
        `${taskSnapshot.bytesTransferred} transferred out of ${taskSnapshot.totalBytes}`,
      );
  
      // setTransferred(
      //   Math.round((taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100),
      // );
    });

    // Await the completion of the upload task
    try {
      await task;
      console.log("Upload successful");
    } catch (error) {
      console.error("Error uploading file:", error);
      setUploading(false); // Reset uploading state
      return null;
    }
    
    try { 
      const url = await getDownloadURL(storageRef);
      // console.log(url)
      // Update user data with image URL
      return url;
     } catch (e){
      console.log(e);
      return null
    }
    
  };

  const updateUserImg = async () => {
    if (!image) {
      console.error("Image URI is null or undefined");
      return;
    }

    const fileUrl = await uploadImage(image);
    await updateDoc(doc(database, 'users', user.uid), { userImg: fileUrl })
        .then(() => {
          console.log('Profile Picture Added!');
          Alert.alert('Picture Uploaded!', 'Your profile picture has been changed Successfully!');
          // setPost(null);
        })
        .catch((error) => {
          console.log('Something went wrong with added post to firestore.', error);
        });
      setUploading(false);
  }

  return (

    <SafeAreaView style={{ backgroundColor: "#EBF0F5", flex: 1 }}>
      <ScrollView style={styles.container}>
        <Text style={{ fontSize: 20, fontWeight: "bold", alignSelf: "center" }}>EDIT PROFILE</Text>
        
        {/* Profile Picture */}
        <View style={styles.profile}>
          <TouchableOpacity onPress={() => setModalVisible(true)}>
            <View style={styles.profileAvatarWrapper}>
              <Image
                source={{
                  uri: image ? image 
                    : userData ? userData.userImg ||
                      'https://firebasestorage.googleapis.com/v0/b/mbraille-54f34.appspot.com/o/profileImage%2FProfilePlaceholder.png?alt=media&token=3c29faf9-dd75-4f3e-b62a-0615db9e7ebc'
                    : 'https://firebasestorage.googleapis.com/v0/b/mbraille-54f34.appspot.com/o/profileImage%2FProfilePlaceholder.png?alt=media&token=3c29faf9-dd75-4f3e-b62a-0615db9e7ebc',
                }}
                style={styles.profileAvatar}
                resizeMode='contain'
              />
              <TouchableOpacity onPress={() => setModalVisible(true)}>
                <View style={styles.profileAction}>
                  <FeatherIcon color="white" name="edit-3" size={15} />
                </View>
              </TouchableOpacity>
              
              <Modal
                animationType="slide"
                transparent={true}
                visible={modalVisible}
                onRequestClose={() => setModalVisible(!modalVisible)}>
                <View style={styles.modalContainerProfile}>
                  <View style={styles.modalContentProfile}>
                    <TouchableOpacity style={styles.iconContainer} onPress={pickImageFromGallery}>
                      <Feather name="folder" size={24} color="grey" />
                      <Text style={styles.iconText}>Gallery</Text>
                    </TouchableOpacity>
                    <TouchableOpacity style={styles.iconContainer} onPress={takeImageFromCamera}>
                      <Feather name="camera" size={24} color="grey" />
                      <Text style={styles.iconText}>Camera</Text>
                    </TouchableOpacity>
                    <TouchableOpacity style={styles.iconContainer} onPress={() => setModalVisible(false)}>
                      <Feather name="x" size={24} color="grey" />
                      <Text style={styles.iconText}>Cancel</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              </Modal>
            </View>
          </TouchableOpacity>
        </View>

        {/* Change Display Name */}
        <View style={styles.changeInfo}>
          <Text style={styles.infoHeader}>Change Display Name</Text>
          <View style={styles.inputWrapper}>
            <AntDesign name="user" size={19} color="blue" style={styles.iconStyle} />
            {isEditing ? (
              <TextInput
                style={styles.input}
                onChangeText={(text) => setName(text)}
                value={name}
              />
            ) : (
              <Text style={styles.inputText}>{name}</Text>
            )}
            <TouchableOpacity onPress={isEditing ? handleSave : handleEditPress}>
            {isSaving ? (
              <ActivityIndicator color="black" size="small" />
            ) : (
              <AntDesign name={isEditing ? "save" : "edit"} size={20} color="black" />
            )}
          </TouchableOpacity>
          </View>
        </View>

        {/* Change Password */}
        {passwordChangeUI}

        
      

        {/* Logout Button */}
        <View style={{ flex: 1, paddingBottom: 100, paddingHorizontal: 50 }}>
          <TouchableOpacity
            onPress={handleLogout}
            style={{
              flexDirection: "row",
              backgroundColor: '#062CD4',
              marginTop: 15,
              height: 50,
              borderRadius: 8,
              alignItems: "center",
              justifyContent: "center",
            }}>
            <Text
              style={{
                fontSize: 19,
                color: 'white',
                fontWeight: "500",
              }}>
              Log Out
            </Text>
          </TouchableOpacity>
          <Modal
            animationType="fade"
            transparent={true}
            visible={showLogoutModal}
            onRequestClose={() => setShowLogoutModal(false)}>
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <Text style={styles.modalText}>Are you sure you want to log out?</Text>
                <View style={styles.modalButtons}>
                  <TouchableOpacity
                    style={[styles.modalButton, styles.cancelButton]}
                    onPress={cancelLogout}>
                    <Text style={styles.modalButtonText}>Cancel</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.modalButton, styles.confirmButton]}
                    onPress={confirmLogout}>
                    <Text style={styles.modalButtonText}>Confirm</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </Modal>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingVertical: 25,
    backgroundColor: 'white'
  },
  profile: {
    padding: 30,
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
  },
  profileAvatar: {
    width: 150,
    height: 150,
    borderRadius: 50,
    borderWidth: 2,
    borderColor: '#062CD4'
  },
  profileAvatarWrapper: {
    position: "relative",
  },
  profileAction: {
    position: "absolute",
    right: -4,
    bottom: -10,
    alignItems: "center",
    justifyContent: "center",
    width: 28,
    height: 28,
    borderRadius: 8,
    backgroundColor: "#062CD4",
  },
  
  changeInfo: {
    flex: 1,
    alignItems: "center"
  },
  infoHeader: {
    fontSize: 12,
    fontWeight: "500",
    color: "grey",
    marginTop: 15,
    color: "black",
    paddingRight: 215,
    fontWeight: "bold"
  },
  inputWrapper: {
    borderColor: "grey",
    height: 45,
    width: 350,
    margin: 2,
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    flexDirection: "row",
    justifyContent: "space-between",
  },
  input: {
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: 0,
    fontSize: 13,
    color: 'grey',
    fontWeight: 'normal'
  },
  inputText: {
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: 0,
    fontSize: 13,
    color: 'grey',
    fontWeight: 'normal'
  },
  iconStyle: {
    paddingRight: 12
  },
  section: {
    paddingHorizontal: 24,
  },
  sectionHeader: {
    paddingVertical: 12,
    fontSize: 12,
    fontWeight: '600',
    color: '#000000',
    textTransform: 'uppercase',
    letterSpacing: 5, 
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    height: 50,
    backgroundColor: 'white',
    borderRadius: 8,
    marginBottom: 12,
    paddingLeft: 12,
    paddingRight: 12,
  },
  rowIcon: {
    width: 50,
    height: 32,
    borderRadius: 8,
    marginRight: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  rowLabel: {
    fontSize: 15,
    fontWeight: '400',
    color: 'black',
    fontWeight: "bold",
    paddingHorizontal: 190,
    paddingLeft: .5
  },
  rowSpacer: {
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: 0,
  },
  // for Logout modal
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderRadius: 8,
    alignItems: "center",
  },
  modalText: {
    fontSize: 17,
    marginBottom: 25,
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "center",
  },
  modalButton: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    marginHorizontal: 10,
    borderRadius: 8,
  },
  cancelButton: {
    backgroundColor: "#062CD4",
  },
  confirmButton: {
    backgroundColor: "#062CD4",
  },
  modalButtonText: {
    fontSize: 14,
    color: "white",
  },
  modalContainerProfile: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContentProfile: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    flexDirection: 'row',
    gap: 10
  },
  iconContainer: {
    borderColor: 'grey',
    borderWidth: 1,
    borderRadius: 25,
    padding: 10,
    flexDirection: 'column',
    alignItems: 'center',
    marginVertical: 10,
  },
  iconText: {
    color: 'grey'
  },
});

export default Profile;
